<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Hugo tranquilpeak theme</title>
    <link>https://fatooo-0027.github.io/post/</link>
    <description>Recent content in Posts on Hugo tranquilpeak theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 Feb 2020 12:33:37 +1100</lastBuildDate>
    
	<atom:link href="https://fatooo-0027.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Codelab的难忘时光</title>
      <link>https://fatooo-0027.github.io/2020/02/%E5%9C%A8codelab%E7%9A%84%E9%9A%BE%E5%BF%98%E6%97%B6%E5%85%89/</link>
      <pubDate>Tue, 11 Feb 2020 12:33:37 +1100</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/02/%E5%9C%A8codelab%E7%9A%84%E9%9A%BE%E5%BF%98%E6%97%B6%E5%85%89/</guid>
      <description>在Codelab的实习是短暂却十分难忘的。这次实习是我的第一次实习，它和我所以为的实习应该有的样子大有不同。这个过程当中我觉得获益良多，感慨也很多。但张口闭口说自己获益良多感慨良多，并没有什么实际的意义，于是便写了这篇博文，希望简单记录一下这段时光，同时也正好是个机会让我好好反思自己到底获了什么益，感慨了些什么。
先说说我对Codelab的印象吧。 澳洲大学的暑假有将近3个月长，若是每天都待在家里，肯定是受不了的。正在琢磨假期要干什么的时候，收到了朋友David的邀请，问有没有兴趣一起去实习。David的爸爸手下的公司正在做一个叫”龙眼“的项目，听说是一个和IOT有关的教育项目。David和龙眼的”负责人“文杰之前就认识，据David说，文杰是一个很厉害的人。有实习的机会对我一个刚学完大一的人来说实在是求之不得，更何况能够向一个”很厉害“的师傅学习，这实在是太好的机会了。
实习的第一天，心情很激动，也有一点紧张，毕竟是第一次上班。到了公司，公司的人给我和David介绍了公司目前在做的几个项目。得知我们确定想要加入龙眼项目之后（虽然那时候我对龙眼在做的事情仍然一头雾水），我们被带到了另一层楼的一间”办公室“。
”办公室“之所以打引号，是因为这里着实不像是一间办公室。房间里遍地摆放着各种各样的物件，大多是电器设备。另外还能看到一些乐高积木，以及一些熟悉的开发板，比如Arduino，还有一些我叫不出名字的东西。房间中央有四张可升降的桌子拼在一起，形成一个很大的平面。房间门口印着一个大大的logo：Codelab。
这里不是办公室，这里更像是一个给孩子的乐园。或者说，不单单是给孩子的，因为我感觉我也被房间里的各种设备所吸引。这就是我对Codelab的第一印象。
文杰给我们做了一个详尽的展示。房间里的所有设备都被文杰接入到了一个他所写的，名叫Adapter的程序上。所有设备通过消息相互通信，而Adapter就是作为所有消息的中转站。也就是说，空间中的东西都能够互相交互，你可以挥动一个魔法杖来让灯泡熄灭，又或是打一个响指来升起窗帘。在看演示的时候还不知道Adapter具体是什么，只是觉得这里的一切实在是太酷了。
后来我才知道，Codelab和David他爸爸的公司并不是一回事。Codelab是一个非盈利组织，最初由文杰创办，只是文杰把他所写的Adapter授权给公司去商业化，才有了之前说到的”龙眼“项目。商业公司自然是必须要盈利的，这也是”龙眼“项目需要重点考虑的东西。但Codelab作为一个非盈利组织，他们希望做的事情和商业公司自然是有很大区别的。
Codelab的正式员工只有文杰和柳青两个人。所以其实要说对Codelab的印象，必然要说说对文杰和柳青的印象。文杰</description>
    </item>
    
    <item>
      <title>Dijkstra算法</title>
      <link>https://fatooo-0027.github.io/2020/02/dijkstra%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 10 Feb 2020 18:20:45 +1100</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/02/dijkstra%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>深度优先搜索</title>
      <link>https://fatooo-0027.github.io/2020/02/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 10 Feb 2020 18:20:16 +1100</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/02/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>广度优先搜索</title>
      <link>https://fatooo-0027.github.io/2020/02/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 10 Feb 2020 18:20:10 +1100</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/02/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>图</title>
      <link>https://fatooo-0027.github.io/2020/02/%E5%9B%BE/</link>
      <pubDate>Mon, 10 Feb 2020 18:19:19 +1100</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/02/%E5%9B%BE/</guid>
      <description>数据结构之：图</description>
    </item>
    
    <item>
      <title>哈希表</title>
      <link>https://fatooo-0027.github.io/2020/01/%E5%93%88%E5%B8%8C%E8%A1%A8/</link>
      <pubDate>Thu, 23 Jan 2020 13:13:46 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E5%93%88%E5%B8%8C%E8%A1%A8/</guid>
      <description>特殊的数据结构：哈希表</description>
    </item>
    
    <item>
      <title>快速排序、归并排序</title>
      <link>https://fatooo-0027.github.io/2020/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 17 Jan 2020 11:51:26 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
      <description>快速排序 时间复杂度 O(nlog(n))
最好：O(nlog(n))
最坏：O(n²)
原理 快速排序采用了分治的思想，同时也是一个非常经典、实用的算法。快排的原理其实不难理解，给定一个列表，每次在列表中选出一个基准值（pivot），然后把所有小于该基准值的元素挪到基准值左边，所有大于该基准值的元素挪到基准值右边。然后再对基准值左右的列表执行相同的操作，如此递归，直到列表有序。
具体的实现思路也比较清晰。选定一个基准值（一般就是列表的第一个元素），然后把小于、大于基准值的元素分别放到两个新的列表less和greater中，然后返回quicksort(less) + pivot + quicksort(greater)。
Python实现 def quick_sort(arr):if len(arr) &amp;lt; 2:return arrelse:pivot = arr[0]less = []greater = []for i in arr[1:]:if i &amp;lt;= pivot:less.append(i)else:greater.append(i)return quick_sort(less) + [pivot] + quick_sort(greater)print(quick_sort([10, 5, 2, 3]))归并排序 时间复杂度 O(nlog(n))
最好：O(nlog(n))
最坏：O(nlog(n))
原理 归并排序同样采用分治思想，也是一个高效的排序算法。不过虽然时间复杂度稳定在O(nlog(n))，但其每一层递归需要执行的指令数量比较多（也就是计算时间复杂度时被忽略的常数C很大）。而快速排序在绝大多数时候也都能够达到O(nlog(n))的时间复杂度，最坏情况出现的概率极小，所以快排仍是目前采用最多的排序算法。事实证明其性能也确实更出色。
归并排序的原理是先将列表不断拆分为两截，直到每一截都只剩一个元素。然后再将这些元素两两合并为多个有序列表，再把这些有序列表合并为更长的有序列表，直到整个列表有序。一篇比较好的文章：https://www.cnblogs.com/chengxiao/p/6194356.html
Python实现 def merge(left, right):l = 0 #index of left r = 0 #index of right result = []while l &amp;lt; len(left) and r &amp;lt; len(right):if left[l] &amp;lt; right[r]:result.</description>
    </item>
    
    <item>
      <title>格斗模拟器</title>
      <link>https://fatooo-0027.github.io/2020/01/%E6%A0%BC%E6%96%97%E6%A8%A1%E6%8B%9F%E5%99%A8/</link>
      <pubDate>Thu, 16 Jan 2020 17:59:02 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E6%A0%BC%E6%96%97%E6%A8%A1%E6%8B%9F%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>选择排序、冒泡排序</title>
      <link>https://fatooo-0027.github.io/2020/01/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 15 Jan 2020 09:32:43 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>选择排序和冒泡排序是最简单的两种排序算法。</description>
    </item>
    
    <item>
      <title>分治</title>
      <link>https://fatooo-0027.github.io/2020/01/%E5%88%86%E6%B2%BB/</link>
      <pubDate>Mon, 13 Jan 2020 21:58:05 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E5%88%86%E6%B2%BB/</guid>
      <description>分治（Divide and Conquer）并不是一种实际的算法，而是一种解决问题的思路。所谓分治，就是“分而治之”，即把一个复杂的问题分成多个相同的子问题，然后再把这些子问题继续分成更小的子问题，直到每个子问题简单到可以直接求解，然后再利用子问题的解求得原问题的解。</description>
    </item>
    
    <item>
      <title>简易分拣器（无传感器）</title>
      <link>https://fatooo-0027.github.io/2020/01/%E7%AE%80%E6%98%93%E5%88%86%E6%8B%A3%E5%99%A8%E6%97%A0%E4%BC%A0%E6%84%9F%E5%99%A8/</link>
      <pubDate>Sat, 11 Jan 2020 21:07:27 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E7%AE%80%E6%98%93%E5%88%86%E6%8B%A3%E5%99%A8%E6%97%A0%E4%BC%A0%E6%84%9F%E5%99%A8/</guid>
      <description>利用Codelab Adapter和Teachable Machine，再配合电脑上自带的摄像头，我们可以做一个简单的分拣器。</description>
    </item>
    
    <item>
      <title>手势操控micro:bit小车</title>
      <link>https://fatooo-0027.github.io/2020/01/%E6%89%8B%E5%8A%BF%E6%93%8D%E6%8E%A7microbit%E5%B0%8F%E8%BD%A6/</link>
      <pubDate>Wed, 08 Jan 2020 15:33:17 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E6%89%8B%E5%8A%BF%E6%93%8D%E6%8E%A7microbit%E5%B0%8F%E8%BD%A6/</guid>
      <description>通过Codelab Adapter在Teachable Machine和Micro:bit之间进行通信</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://fatooo-0027.github.io/2020/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 08 Jan 2020 12:51:03 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2020/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description>二分查找的功能是在一个有序的元素列表中查找一个特定的元素。</description>
    </item>
    
    <item>
      <title>RRF使用时遇到的一些问题和说明</title>
      <link>https://fatooo-0027.github.io/2019/12/rrf%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%92%8C%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sun, 15 Dec 2019 17:28:23 +0800</pubDate>
      
      <guid>https://fatooo-0027.github.io/2019/12/rrf%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%92%8C%E8%AF%B4%E6%98%8E/</guid>
      <description>目前RRF的app还不太完善，bug比较多。另外对于编程界面提供的各个积木块的功能没有明确的说明，而且部分积木块存在功能重复的情况。比如在motor模块提供了drive和spin motor两种积木块，可以考虑在接入codelab以后合并成同一积木块，然后通过修改参数实现不同功能。以下是在试用过程中遇到的一些问题以及说明。</description>
    </item>
    
  </channel>
</rss>